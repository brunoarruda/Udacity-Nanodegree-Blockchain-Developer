const Web3lib = require('web3')
const EthereumTransaction = require('ethereumjs-tx')
const url_rinkeby = 'https://rinkeby.infura.io/v3/CODE'
const url_main = 'https://mainnet.infura.io/v3/CODE'
const url_ganache = 'HTTP://127.0.0.1:7545'

const web3 = new Web3lib(url_main)

// addresses are mock, generated by ganache
var address = '0x0A13519FEBf9D74fE848cc6786EDfe0eFDf6bd5F'

web3.eth.getBalance(address).then((bal) => {
    bal = web3.utils.fromWei(bal, 'ether')
    console.log(bal)})

web3.eth.getAccounts().then(accounts => console.log(accounts))

web3.eth.getTransactionCount(address).then((count) => {console.log(count)})

var abi = JSON.parse('[{"constant":true,"inputs":[],"name":"batFundDeposit","outputs":[{"name":"","type":"address"}],"payable":false,"type":"function"},{"constant":true,"inputs":[],"name":"name","outputs":[{"name":"","type":"string"}],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"_spender","type":"address"},{"name":"_value","type":"uint256"}],"name":"approve","outputs":[{"name":"success","type":"bool"}],"payable":false,"type":"function"},{"constant":true,"inputs":[],"name":"totalSupply","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"},{"constant":true,"inputs":[],"name":"batFund","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"_from","type":"address"},{"name":"_to","type":"address"},{"name":"_value","type":"uint256"}],"name":"transferFrom","outputs":[{"name":"success","type":"bool"}],"payable":false,"type":"function"},{"constant":true,"inputs":[],"name":"decimals","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"},{"constant":true,"inputs":[],"name":"tokenExchangeRate","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"},{"constant":false,"inputs":[],"name":"finalize","outputs":[],"payable":false,"type":"function"},{"constant":true,"inputs":[],"name":"version","outputs":[{"name":"","type":"string"}],"payable":false,"type":"function"},{"constant":false,"inputs":[],"name":"refund","outputs":[],"payable":false,"type":"function"},{"constant":true,"inputs":[],"name":"tokenCreationCap","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"},{"constant":true,"inputs":[{"name":"_owner","type":"address"}],"name":"balanceOf","outputs":[{"name":"balance","type":"uint256"}],"payable":false,"type":"function"},{"constant":true,"inputs":[],"name":"isFinalized","outputs":[{"name":"","type":"bool"}],"payable":false,"type":"function"},{"constant":true,"inputs":[],"name":"fundingEndBlock","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"},{"constant":true,"inputs":[],"name":"symbol","outputs":[{"name":"","type":"string"}],"payable":false,"type":"function"},{"constant":true,"inputs":[],"name":"ethFundDeposit","outputs":[{"name":"","type":"address"}],"payable":false,"type":"function"},{"constant":false,"inputs":[{"name":"_to","type":"address"},{"name":"_value","type":"uint256"}],"name":"transfer","outputs":[{"name":"success","type":"bool"}],"payable":false,"type":"function"},{"constant":false,"inputs":[],"name":"createTokens","outputs":[],"payable":true,"type":"function"},{"constant":true,"inputs":[],"name":"tokenCreationMin","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"},{"constant":true,"inputs":[],"name":"fundingStartBlock","outputs":[{"name":"","type":"uint256"}],"payable":false,"type":"function"},{"constant":true,"inputs":[{"name":"_owner","type":"address"},{"name":"_spender","type":"address"}],"name":"allowance","outputs":[{"name":"remaining","type":"uint256"}],"payable":false,"type":"function"},{"inputs":[{"name":"_ethFundDeposit","type":"address"},{"name":"_batFundDeposit","type":"address"},{"name":"_fundingStartBlock","type":"uint256"},{"name":"_fundingEndBlock","type":"uint256"}],"payable":false,"type":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"name":"_to","type":"address"},{"indexed":false,"name":"_value","type":"uint256"}],"name":"LogRefund","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"_to","type":"address"},{"indexed":false,"name":"_value","type":"uint256"}],"name":"CreateBAT","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"_from","type":"address"},{"indexed":true,"name":"_to","type":"address"},{"indexed":false,"name":"_value","type":"uint256"}],"name":"Transfer","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"_owner","type":"address"},{"indexed":true,"name":"_spender","type":"address"},{"indexed":false,"name":"_value","type":"uint256"}],"name":"Approval","type":"event"}]')

var contract_address = '0x0D8775F648430679A709E98d2b0Cb6250d2887EF'

var contract = new web3.eth.Contract(abi, contract_address)

contract.methods.name().call().then((result, err) => {console.log(result)})

contract.methods.totalSupply().call().then((result, err) => { console.log(result) })

var sendingAddress = '0x0A13519FEBf9D74fE848cc6786EDfe0eFDf6bd5F'
var receivingAddres = '0x228E75bC64d83a224bcbBE942700e15bC5D4AE75'

web3.eth.getBalance(sendingAddress).then(console.log)
web3.eth.getBalance(receivingAddres).then(console.log)

// creating transaction
// change nonce after first transaction
var rawTransaction = {
    nonce: 0,
    to: receivingAddres,
    gasPrice: 2000000,
    gasLimit: 30000,
    value: 10000000000,
    data: ''
}

var privateKeySender = 'b0dfbf55b44bc6e709d808ea3e88861b42d7d18cc72bf4081c0274ffa3ff913a'
var privateKeySenderHex = new Buffer.from(privateKeySender, 'hex')
var transaction = new EthereumTransaction(rawTransaction)

//sign transaction
transaction.sign(privateKeySenderHex)

//serialize
var serializedTransaction = transaction.serialize()
web3.eth.sendSignedTransaction(serializedTransaction)


// get statistical data about the network
web3.eth.getGasPrice(console.log)

web3.eth.getUncle('latest', 0).then(console.log)

web3.eth.getBlockTransactionCount('latest').then(console.log)